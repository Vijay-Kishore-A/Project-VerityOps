name: VerityOps Tamper Test
on:
  workflow_dispatch:
    inputs:
      seek_block:
        description: "4KiB block index to flip"
        required: true
        default: "100"
      count_blocks:
        description: "How many 4KiB blocks to flip"
        required: true
        default: "1"

jobs:
  tamper_test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install deps & clone avbtool
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y e2fsprogs xxd openssl git python3 gzip
          git clone https://android.googlesource.com/platform/external/avb
          test -f avb/avbtool.py || { echo "avbtool.py missing"; exit 1; }

      - name: Generate demo AVB key
        run: |
          openssl genrsa -out testkey_rsa2048.pem 2048
          openssl rsa -in testkey_rsa2048.pem -pubout -out testkey_rsa2048_pub.pem

      - name: Create ext4 image (128MiB)
        run: bash scripts/make_ext4.sh system.img 128

      - name: Add dm-verity hashtree
        run: bash scripts/add_hashtree.sh system.img system_with_hashtree.img testkey_rsa2048.pem 64

      - name: Make vbmeta
        run: bash scripts/make_vbmeta.sh system_with_hashtree.img testkey_rsa2048.pem vbmeta.img

      - name: Baseline vbmeta digest
        run: |
          python3 avb/avbtool.py calculate_vbmeta_digest \
            --image vbmeta.img --hash_algorithm sha256 | tee digest_clean.txt

      - name: Tamper image (flip blocks)
        run: |
          cp system_with_hashtree.img system_tampered.img
          dd if=/dev/urandom of=system_tampered.img bs=4096 \
             count=${{ inputs.count_blocks }} seek=${{ inputs.seek_block }} conv=notrunc

      - name: Baseline verify (clean image should pass)
        run: |
          set -e
          python3 avb/avbtool.py verify_image --image system_with_hashtree.img
          echo "Clean image verified OK"

      - name: Tamper verify (tampered image must fail)
        run: |
          set +e
          python3 avb/avbtool.py verify_image --image system_tampered.img
          rc=$?
          if [ "$rc" -eq 0 ]; then
            echo "Tamper NOT detected (verification still passes)"
            exit 1
          else
            echo "Tamper detected (verification fails as expected)"
          fi


      - name: Publish summary
        run: |
          {
            echo "## VerityOps Tamper Test"
            echo ""
            echo "**Blocks flipped:** ${{ inputs.count_blocks }} @ block ${{ inputs.seek_block }}"
            echo ""
            echo "### vbmeta digests"
            echo '```'
            paste <(echo -n "clean    ") digest_clean.txt
            paste <(echo -n "tampered ") digest_tampered.txt
            echo '```'
          } >> $GITHUB_STEP_SUMMARY

      - name: Upload evidence
        uses: actions/upload-artifact@v4
        with:
          name: tamper-evidence
          path: |
            digest_clean.txt
            digest_tampered.txt
            vbmeta.img
            vbmeta_tampered.img
