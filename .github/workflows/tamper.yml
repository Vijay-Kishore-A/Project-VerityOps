name: VerityOps Tamper Test

on:
  workflow_dispatch:
    inputs:
      seek_block:
        description: "4KiB block index to flip"
        required: true
        default: "100"
      count_blocks:
        description: "How many 4KiB blocks to flip"
        required: true
        default: "1"

jobs:
  tamper_test:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install deps & clone avbtool
        run: |
          set -euo pipefail
          sudo apt-get update
          # cryptsetup-bin provides veritysetup (native dm-verity tool)
          sudo apt-get install -y e2fsprogs xxd openssl git python3 gzip cryptsetup-bin
          git clone https://android.googlesource.com/platform/external/avb
          test -f avb/avbtool.py || { echo "avbtool.py missing"; exit 1; }

      - name: Generate demo AVB key
        run: |
          openssl genrsa -out testkey_rsa2048.pem 2048
          openssl rsa -in testkey_rsa2048.pem -pubout -out testkey_rsa2048_pub.pem

      - name: Create ext4 image (16MiB)
        run: bash scripts/make_ext4.sh system.img 16

      - name: Add dm-verity hashtree
        run: bash scripts/add_hashtree.sh system.img system_with_hashtree.img testkey_rsa2048.pem 8

      - name: Sanity check
        shell: bash
        run: |
          set -euo pipefail
          echo "---- avbtool info_image (system_with_hashtree.img) ----"
          python3 avb/avbtool.py info_image --image system_with_hashtree.img | sed -n '1,160p'
          stat -c "file_size=%s" system_with_hashtree.img

      - name: Make vbmeta
        run: bash scripts/make_vbmeta.sh system_with_hashtree.img testkey_rsa2048.pem vbmeta.img

      - name: Baseline vbmeta digest
        run: |
          python3 avb/avbtool.py calculate_vbmeta_digest \
            --image vbmeta.img --hash_algorithm sha256 | tee digest_clean.txt

      # ---------- robust parameter extraction (python) ----------
      - name: Extract hashtree params (robust)
        id: params
        shell: bash
        run: |
          set -euo pipefail
          python3 avb/avbtool.py info_image --image system_with_hashtree.img > info.txt
          python3 - <<'PY'
          import os, re
          txt = open('info.txt','r',encoding='utf-8',errors='ignore').read()
          m = re.search(r'Hashtree descriptor:\s*(.*?)(?:^\s*$|^VBMeta offset:)', txt, re.S|re.M)
          blk = m.group(1) if m else txt
          def num(key, default=None):
              m = re.search(rf'^\s*{re.escape(key)}\s*:\s*(0x[0-9a-fA-F]+|\d+)', blk, re.M|re.I)
              return int(m.group(1), 0) if m else default
          def hexstr(key):
              m = re.search(rf'^\s*{re.escape(key)}\s*:\s*([0-9a-fA-F]+)', blk, re.M|re.I)
              return m.group(1) if m else ''
          off  = num('Tree Offset', 0)
          hsz  = num('Tree Size', 0)
          dbs  = num('Data Block Size', 4096)
          hbs  = num('Hash Block Size', 4096)
          salt = hexstr('Salt')
          root = hexstr('Root Digest')
          datablocks = (off // dbs) if dbs else 0
          print(f"OFF={off} HSZ={hsz} DBS={dbs} HBS={hbs}")
          print(f"SALT={salt}")
          print(f"ROOT={root}")
          print(f"DATABLOCKS={datablocks}")
          out = os.environ['GITHUB_OUTPUT']
          with open(out, 'a') as f:
              for k,v in [('off',off),('hsz',hsz),('dbs',dbs),('hbs',hbs),
                          ('salt',salt),('root',root),('datablocks',datablocks)]:
                  f.write(f"{k}={v}\n")
          PY

      # ---------- fast, deterministic verification via veritysetup ----------
      - name: Baseline verify with veritysetup (clean must pass)
        shell: bash
        run: |
          set -euo pipefail
          /usr/bin/time -f 'verity(clean): %E cpu:%P mem:%MKB' \
            sudo veritysetup --debug verify \
              --no-superblock \
              --data-block-size=${{ steps.params.outputs.dbs }} \
              --hash-block-size=${{ steps.params.outputs.hbs }} \
              --data-blocks=${{ steps.params.outputs.datablocks }} \
              --hash-offset=${{ steps.params.outputs.off }} \
              --salt=${{ steps.params.outputs.salt }} \
              system_with_hashtree.img system_with_hashtree.img \
              ${{ steps.params.outputs.root }}
          echo "✅ Clean image verified OK (veritysetup)"

      - name: Tamper image (flip blocks)
        run: |
          cp system_with_hashtree.img system_tampered.img
          dd if=/dev/urandom of=system_tampered.img bs=4096 \
             count=${{ inputs.count_blocks }} seek=${{ inputs.seek_block }} conv=notrunc

      - name: Tamper verify with veritysetup (tampered must fail)
        shell: bash
        run: |
          set +e
          /usr/bin/time -f 'verity(tampered): %E cpu:%P mem:%MKB' \
            sudo veritysetup --debug verify \
              --no-superblock \
              --data-block-size=${{ steps.params.outputs.dbs }} \
              --hash-block-size=${{ steps.params.outputs.hbs }} \
              --data-blocks=${{ steps.params.outputs.datablocks }} \
              --hash-offset=${{ steps.params.outputs.off }} \
              --salt=${{ steps.params.outputs.salt }} \
              system_tampered.img system_tampered.img \
              ${{ steps.params.outputs.root }}
          rc=$?
          if [ "$rc" -eq 0 ]; then
            echo "❌ Tamper NOT detected (verification still passes)"; exit 1
          else
            echo "✅ Tamper detected (verification fails as expected)"; exit 0
          fi

      - name: Publish summary
        run: |
          {
            echo "## VerityOps Tamper Test (veritysetup)"
            echo ""
            echo "**Blocks flipped:** ${{ inputs.count_blocks }} @ block ${{ inputs.seek_block }}"
            echo ""
            echo "### Hashtree parameters"
            echo "- Tree Offset:     ${{ steps.params.outputs.off }}"
            echo "- Tree Size:       ${{ steps.params.outputs.hsz }}"
            echo "- Data Block Size: ${{ steps.params.outputs.dbs }}"
            echo "- Hash Block Size: ${{ steps.params.outputs.hbs }}"
            echo "- Salt:            ${{ steps.params.outputs.salt }}"
            echo "- Root Digest:     ${{ steps.params.outputs.root }}"
            echo "- Data Blocks:     ${{ steps.params.outputs.datablocks }}"
          } >> $GITHUB_STEP_SUMMARY

      - name: Upload evidence
        uses: actions/upload-artifact@v4
        with:
          name: tamper-evidence
          path: |
            info.txt
            digest_clean.txt
            system_with_hashtree.img
            system_tampered.img
            vbmeta.img
